package com.nlf.calendar.util;

import com.nlf.calendar.Holiday;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * 法定节假日工具（默认自2001年12月29日起）
 *
 * @author 6tail
 */
public class HolidayUtil {

  /** 数据段长度 */
  private static final int SIZE = 18;
  /** 0 */
  private static final char ZERO = '0';
  /** 删除标识 */
  private static final String TAG_REMOVE = "~";
  /** 默认节假日名称（元旦0，春节1，清明2，劳动3，端午4，中秋5，国庆6，国庆中秋7，抗战胜利日8） */
  public static final String[] NAMES = {"元旦节","春节","清明节","劳动节","端午节","中秋节","国庆节","国庆中秋","抗战胜利日"};
  /** 默认节假日数据，日期YYYYMMDD+名称下标+是否调休+对应节日YYYYMMDD */
  private static final String

  /** 使用的节假日名称 */
  private static String[] NAMES_IN_USE = NAMES;
  /** 使用的节假日数据 */
  private static String DATA_IN_USE = DATA;

  private HolidayUtil(){}

  private static String padding(int n){
    return (n<10?"0":"")+n;
  }

  private static Holiday buildHolidayForward(String s){
    String day = s.substring(0,8);
    String name = NAMES_IN_USE[s.charAt(8)-ZERO];
    boolean work = s.charAt(9)==ZERO;
    String target = s.substring(10,SIZE);
    return new Holiday(day,name,work,target);
  }

  private static Holiday buildHolidayBackward(String s){
    int size = s.length();
    String day = s.substring(size-18,size-10);
    String name = NAMES_IN_USE[s.charAt(size-10)-ZERO];
    boolean work = s.charAt(size-9)==ZERO;
    String target = s.substring(size-8);
    return new Holiday(day,name,work,target);
  }

  private static String findForward(String key){
    int start = DATA_IN_USE.indexOf(key);
    if(start<0) {
      return null;
    }
    String right = DATA_IN_USE.substring(start);
    int n = right.length()%SIZE;
    if(n>0){
      right = right.substring(n);
    }
    while((!right.startsWith(key))&&right.length()>=SIZE){
      right = right.substring(SIZE);
    }
    return right;
  }

  private static String findBackward(String key){
    int start = DATA_IN_USE.lastIndexOf(key);
    if(start<0) {
      return null;
    }
    String left = DATA_IN_USE.substring(0,start+key.length());
    int size = left.length();
    int n = size%SIZE;
    if(n>0){
      left = left.substring(0,size-n);
    }
    size = left.length();
    while((!left.endsWith(key))&&size>=SIZE){
      left = left.substring(0,size-SIZE);
      size = left.length();
    }
    return left;
  }

  private static List<Holiday> findHolidaysForward(String key){
    List<Holiday> l = new ArrayList<Holiday>();
    String s = findForward(key);
    if(null!=s) {
      while (s.startsWith(key)) {
        l.add(buildHolidayForward(s));
        s = s.substring(SIZE);
      }
    }
    return l;
  }

  private static List<Holiday> findHolidaysBackward(String key){
    List<Holiday> l = new ArrayList<Holiday>();
    String s = findBackward(key);
    if(null!=s) {
      while (s.endsWith(key)) {
        l.add(0, buildHolidayBackward(s));
        s = s.substring(0, s.length() - SIZE);
      }
    }
    return l;
  }

  /**
   * 获取指定年月日的节假日信息，如果不存在，返回null
   * @param year 年
   * @param month 月，1-12
   * @param day 日，1-31
   * @return 节假日
   */
  public static Holiday getHoliday(int year,int month, int day){
    List<Holiday> l = findHolidaysForward(year+padding(month)+padding(day));
    return l.isEmpty()?null:l.get(0);
  }

  /**
   * 获取指定年月日的节假日信息，如果不存在，返回null
   * @param ymd 年月日
   * @return 节假日
   */
  public static Holiday getHoliday(String ymd){
    List<Holiday> l = findHolidaysForward(ymd.replace("-",""));
    return l.isEmpty()?null:l.get(0);
  }

  /**
   * 获取指定年月的节假日列表
   * @param year 年
   * @param month 月，1-12
   * @return 节假日列表
   */
  public static List<Holiday> getHolidays(int year, int month){
    return findHolidaysForward(year+padding(month));
  }

  /**
   * 获取指定年的节假日列表
   * @param year 年
   * @return 节假日列表
   */
  public static List<Holiday> getHolidays(int year){
    return findHolidaysForward(year+"");
  }

  /**
   * 获取指定年月日的节假日列表
   * @param ymd 年、年月、年月日
   * @return 节假日列表
   */
  public static List<Holiday> getHolidays(String ymd){
    return findHolidaysForward(ymd.replace("-",""));
  }

  /**
   * 获取指定节日（仅节日当天）的相关节假日列表
   * @param ymd 年月日
   * @return 节假日列表
   */
  public static List<Holiday> getHolidaysByTarget(String ymd){
    return findHolidaysBackward(ymd.replace("-",""));
  }

  /**
   * 获取指定节日（仅节日当天）的相关节假日列表
   * @param year 年
   * @param month 月
   * @param day 日
   * @return 节假日列表
   */
  public static List<Holiday> getHolidaysByTarget(int year, int month, int day){
    return findHolidaysBackward(year+padding(month)+padding(day));
  }

  /**
   * 修正或追加节假日数据。节假日名称下标从0开始，超过9的，按ASCII码表依次往后排列；调休标识0为上班，否则放假
   * @param names 用于替换默认的节假日名称列表，传null即可使用默认名称
   * @param data 需要修正或追加的节假日数据，每18位表示1天依次排列，格式：当天年月日YYYYMMDD(8位)+节假日名称下标(1位)+调休标识(1位)+节假日当天YYYYMMDD(8位)。例：202005023120200501代表2020-05-02为劳动节放假，对应节假日为2020-05-01
   */
  public static void fix(String[] names, String data){
    if(null != names){
      NAMES_IN_USE = names;
    }
    if(null == data){
      return;
    }
    StringBuilder append = new StringBuilder();
    while(data.length() >= SIZE){
      String segment = data.substring(0, SIZE);
      String day = segment.substring(0, 8);
      boolean remove = TAG_REMOVE.equals(segment.substring(8, 9));
      Holiday holiday = getHoliday(day);
      if(null == holiday){
        if (!remove) {
          append.append(segment);
        }
      }else{
        int nameIndex = -1;
        for(int i = 0,j = NAMES_IN_USE.length; i < j; i++){
          if(NAMES_IN_USE[i].equals(holiday.getName())){
            nameIndex = i;
            break;
          }
        }
        if(nameIndex>-1) {
          String old = day + (char)(nameIndex + ZERO) + (holiday.isWork() ? ZERO : '1') + holiday.getTarget().replace("-","");
          DATA_IN_USE = DATA_IN_USE.replace(old, remove ? "" : segment);
        }
      }
      data = data.substring(SIZE);
    }
    if(append.length() > 0){
      DATA_IN_USE += append.toString();
    }
  }

  /**
   * 使用默认的节假日名称来修正或追加节假日数据。节假日名称下标从0开始，最大为8(元旦节0，春节1，清明节2，劳动节3，端午节4，中秋节5，国庆节6，国庆中秋7，抗战胜利日8)；调休标识0为上班，否则放假
   * @param data 需要修正或追加的节假日数据，每18位表示1天依次排列，格式：当天年月日YYYYMMDD(8位)+节假日名称下标(1位)+调休标识(1位)+节假日当天YYYYMMDD(8位)。例：202005023120200501代表2020-05-02为劳动节放假，对应节假日为2020-05-01
   */
  public static void fix(String data){
    fix(null, data);
  }
}
